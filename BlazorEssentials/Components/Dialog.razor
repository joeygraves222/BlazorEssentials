@inherits EssentialsBaseComponent

<style>
    @((MarkupString)("#" + ModalId))::backdrop {
        background: rgba(104,104,104,.75);
    }
    @((MarkupString)("#" + ModalId)){
        background-color: white;
        border: none;
        border-radius: 10px;
        padding: 20px;
    }
    .dark-mode @((MarkupString)("#" + ModalId)) {
        background-color: #454d55;
        color: white;
    }
    @((MarkupString)("#" + ModalId)) h3
    {
        width: 100%;
        text-align: center;
    }
    .dialog-container
    {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
    }
    .dialog-buttons-container {
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        align-items: center;
        width: 100%;
        margin-top: 10px;
    }
</style>


<dialog id="@ModalId">
    @if (!String.IsNullOrEmpty(Title))
    {
        <h3>@Title</h3>
        <hr />
    }
    <div class="dialog-container">
        <div style="@((MarkupString)(MinWidth.HasValue ? "min-width: " + MinWidth.Value + "px;" : "")) @((MarkupString)(MaxWidth.HasValue ? "max-width: " + MaxWidth.Value + "px;" : ""))">
            @Body
        </div>
        <div style="@((MarkupString)(MinWidth.HasValue ? "min-width: " + MinWidth.Value + "px;" : "")) @((MarkupString)(MaxWidth.HasValue ? "max-width: " + MaxWidth.Value + "px;" : ""))"
             class="dialog-buttons-container">
            @Buttons
        </div>
    </div>
</dialog>


@code {

    [Parameter]
    public string ModalId { get; set; } = "New-Modal";

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment Body { get; set; }

    [Parameter]
    public RenderFragment Buttons { get; set; }

    [Parameter]
    public int? MinWidth { get; set; } = 100;

    [Parameter]
    public int? MaxWidth { get; set; } = 500;


    public async void ShowModal()
    {
        await JS.ShowModalDialog(ModalId);
    }

    public async void CloseModal()
    {
        await JS.CloseModalDialog(ModalId);
    }
}